const fs = require('fs');
const path = require('path');

// --- Brute-force .env parsing ---
const envPath = path.resolve(process.cwd(), '.env');
const config = {};
try {
    const envFileContent = fs.readFileSync(envPath, 'utf8');
    const lines = envFileContent.split('\n');
    for (const line of lines) {
        if (line.trim() && !line.startsWith('#')) {
            const [key, value] = line.split('=', 2);
            if (key && value) {
                config[key.trim()] = value.replace(/^"|"$/g, '').trim(); // Remove quotes and trim
            }
        }
    }
    console.log('[Debug] Directly parsed .env into config object.');
} catch (e) {
    console.error(`[Debug] Could not read or parse .env file: ${e.message}`);
    process.exit(1);
}
// --- End brute-force parsing ---

const configDir = './js';
const configPath = path.join(configDir, 'config.js');

// This is the template for the js/config.js file.
const firebaseConfigContent = `// This file is generated automatically by generate-config.js during the build process.
// Do not edit this file manually. Your changes will be overwritten.

export const firebaseConfig = {
  apiKey: "${config.PUBLIC_FIREBASE_API_KEY}",
  authDomain: "${config.PUBLIC_FIREBASE_AUTH_DOMAIN}",
  projectId: "${config.PUBLIC_FIREBASE_PROJECT_ID}",
  storageBucket: "${config.PUBLIC_FIREBASE_STORAGE_BUCKET}",
  messagingSenderId: "${config.PUBLIC_FIREBASE_MESSAGING_SENDER_ID}",
  appId: "${config.PUBLIC_FIREBASE_APP_ID}",
  measurementId: "${config.PUBLIC_FIREBASE_MEASUREMENT_ID}"
};
`;

// Create the 'js' directory if it doesn't already exist.
if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
}

// Write the dynamic configuration to the file.
fs.writeFileSync(configPath, firebaseConfigContent.trim());

console.log(`Firebase config generated successfully at ${configPath}`); 