const fs = require('fs');
const path = require('path');

// Check if we're running on Vercel (production) or locally (development)
const isVercel = process.env.VERCEL === '1';

let config = {};

if (isVercel) {
    // On Vercel: Read from process.env (environment variables set in Vercel dashboard)
    console.log('[Debug] Running on Vercel - reading from process.env');
    config = {
        PUBLIC_FIREBASE_API_KEY: process.env.PUBLIC_FIREBASE_API_KEY,
        PUBLIC_FIREBASE_AUTH_DOMAIN: process.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
        PUBLIC_FIREBASE_PROJECT_ID: process.env.PUBLIC_FIREBASE_PROJECT_ID,
        PUBLIC_FIREBASE_STORAGE_BUCKET: process.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
        PUBLIC_FIREBASE_MESSAGING_SENDER_ID: process.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
        PUBLIC_FIREBASE_APP_ID: process.env.PUBLIC_FIREBASE_APP_ID,
        PUBLIC_FIREBASE_MEASUREMENT_ID: process.env.PUBLIC_FIREBASE_MEASUREMENT_ID
    };
} else {
    // Locally: Read from .env file
    console.log('[Debug] Running locally - reading from .env file');
    const envPath = path.resolve(process.cwd(), '.env');
    try {
        const envFileContent = fs.readFileSync(envPath, 'utf8');
        const lines = envFileContent.split('\n');
        for (const line of lines) {
            if (line.trim() && !line.startsWith('#')) {
                const [key, value] = line.split('=', 2);
                if (key && value) {
                    config[key.trim()] = value.replace(/^"|"$/g, '').trim();
                }
            }
        }
        console.log('[Debug] Successfully parsed .env file');
    } catch (e) {
        console.error(`[Debug] Could not read or parse .env file: ${e.message}`);
        process.exit(1);
    }
}

// Check if all required variables are present
const requiredVars = [
    'PUBLIC_FIREBASE_API_KEY',
    'PUBLIC_FIREBASE_AUTH_DOMAIN',
    'PUBLIC_FIREBASE_PROJECT_ID',
    'PUBLIC_FIREBASE_STORAGE_BUCKET',
    'PUBLIC_FIREBASE_MESSAGING_SENDER_ID',
    'PUBLIC_FIREBASE_APP_ID',
    'PUBLIC_FIREBASE_MEASUREMENT_ID'
];

const missingVars = requiredVars.filter(varName => !config[varName]);
if (missingVars.length > 0) {
    console.error('Error: Missing required environment variables:');
    console.error(missingVars.join('\n'));
    process.exit(1);
}

const configDir = './js';
const configPath = path.join(configDir, 'config.js');

// This is the template for the js/config.js file.
const firebaseConfigContent = `// This file is generated automatically by generate-config.js during the build process.
// Do not edit this file manually. Your changes will be overwritten.

export const firebaseConfig = {
  apiKey: "${config.PUBLIC_FIREBASE_API_KEY}",
  authDomain: "${config.PUBLIC_FIREBASE_AUTH_DOMAIN}",
  projectId: "${config.PUBLIC_FIREBASE_PROJECT_ID}",
  storageBucket: "${config.PUBLIC_FIREBASE_STORAGE_BUCKET}",
  messagingSenderId: "${config.PUBLIC_FIREBASE_MESSAGING_SENDER_ID}",
  appId: "${config.PUBLIC_FIREBASE_APP_ID}",
  measurementId: "${config.PUBLIC_FIREBASE_MEASUREMENT_ID}"
};
`;

// Create the 'js' directory if it doesn't already exist.
if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
}

// Write the dynamic configuration to the file.
fs.writeFileSync(configPath, firebaseConfigContent.trim());

console.log(`Firebase config generated successfully at ${configPath}`); 